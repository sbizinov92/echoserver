---
  name: Continuous Delivery - Docker Image
  
  on:
    workflow_run:
      workflows: ["Continuous Integration"]
      branches: [main]
      types: 
        - completed
    push:
      tags:
        - v*
    # Allow manual trigger
    workflow_dispatch:
  
  env:
    AWS_REGION: ${{ vars.AWS_REGION }}
    ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
    AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  
  jobs:
    docker:
      name: Docker
      runs-on: ubuntu-latest
      if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
      steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
  
        - name: Docker Metadata
          id: metadata
          uses: docker/metadata-action@v5
          with:
            images: |
              ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}
            tags: |
              type=ref,event=branch
              type=semver,pattern={{raw}}
              type=sha
  
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
  
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
  
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3
  
        - name: Build and Push Docker Image
          id: docker_build
          uses: docker/build-push-action@v6
          with:
            push: true
            context: .
            file: ./cmd/echoserver/Dockerfile
            platforms: linux/amd64
            cache-from: type=gha
            cache-to: type=gha,mode=max
            tags: ${{ steps.metadata.outputs.tags }}
            labels: ${{ steps.metadata.outputs.labels }}
  
    scan-image:
      name: Scan Container Image
      runs-on: ubuntu-latest
      needs: docker
      steps:
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
  
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@62f4f872db3836360b72999f4b87f1ff13310f3a
  
        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: '${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}'
            format: 'sarif'
            output: 'trivy-results.sarif'
            exit-code: '0'
            ignore-unfixed: false
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH,MEDIUM'
  
        - name: Upload Trivy scan results to GitHub Security tab
          uses: github/codeql-action/upload-sarif@v2
          with:
            sarif_file: 'trivy-results.sarif'